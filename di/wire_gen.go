// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"gorm.io/gorm"
	repository2 "todo-golang/domain/repository"
	"todo-golang/domain/service"
	"todo-golang/gen/openapi/v1"
	"todo-golang/handler"
	"todo-golang/infrastructure/container"
	"todo-golang/infrastructure/repository"
	"todo-golang/usecase"
)

// Injectors from wire.go:

// InitializeAPIContainer function now builds everything together using wire.Build
func InitializeAPIContainer(db *gorm.DB) *container.APIContainer {
	todoRepository := repository.NewTodoRepository(db)
	userRepository := repository.NewUserRepository(db)
	todoService := service.NewTodoService(todoRepository, userRepository)
	todoUsecase := usecase.NewTodoUseCase(todoService)
	todoHandler := handler.NewTodoHandler(todoUsecase)
	userService := service.NewUserService(userRepository)
	userUsecase := usecase.NewUserUsecase(userService)
	userHandler := handler.NewUserHandler(userUsecase)
	diHandlerWrapper := &handlerWrapper{
		TodoHandler: todoHandler,
		UserHandler: userHandler,
	}
	apiContainer := &container.APIContainer{
		Todo: diHandlerWrapper,
	}
	return apiContainer
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewTodoRepository, repository.NewUserRepository, wire.Bind(new(repository2.TodoRepository), new(*repository.TodoRepository)), wire.Bind(new(repository2.UserRepository), new(*repository.UserRepository)))

var serviceSet = wire.NewSet(service.NewTodoService, service.NewUserService, wire.Bind(new(usecase.TodoService), new(*service.TodoService)), wire.Bind(new(usecase.UserService), new(*service.UserService)))

var usecaseSet = wire.NewSet(usecase.NewTodoUseCase, usecase.NewUserUsecase, wire.Bind(new(handler.TodoUseCase), new(*usecase.TodoUsecase)), wire.Bind(new(handler.UserUsecase), new(*usecase.UserUsecase)))

type handlerWrapper struct {
	*handler.TodoHandler
	*handler.UserHandler
}

var handlerSet = wire.NewSet(handler.NewTodoHandler, handler.NewUserHandler, wire.Struct(new(handlerWrapper), "*"), wire.Bind(new(openapi.ServerInterface), new(*handlerWrapper)))
