// Code generated by MockGen. DO NOT EDIT.
// Source: todo_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"
	usecase "todo-golang/usecase"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoUseCase is a mock of TodoUseCase interface.
type MockTodoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTodoUseCaseMockRecorder
}

// MockTodoUseCaseMockRecorder is the mock recorder for MockTodoUseCase.
type MockTodoUseCaseMockRecorder struct {
	mock *MockTodoUseCase
}

// NewMockTodoUseCase creates a new mock instance.
func NewMockTodoUseCase(ctrl *gomock.Controller) *MockTodoUseCase {
	mock := &MockTodoUseCase{ctrl: ctrl}
	mock.recorder = &MockTodoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoUseCase) EXPECT() *MockTodoUseCaseMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodoUseCase) CreateTodo(ctx context.Context, email string, todo usecase.TodoUsecaseInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, email, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoUseCaseMockRecorder) CreateTodo(ctx, email, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoUseCase)(nil).CreateTodo), ctx, email, todo)
}

// DeleteTodo mocks base method.
func (m *MockTodoUseCase) DeleteTodo(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoUseCaseMockRecorder) DeleteTodo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoUseCase)(nil).DeleteTodo), ctx, id)
}

// GetTodoByID mocks base method.
func (m *MockTodoUseCase) GetTodoByID(ctx context.Context, id uint, email string) (*usecase.TodoUsecaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", ctx, id, email)
	ret0, _ := ret[0].(*usecase.TodoUsecaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockTodoUseCaseMockRecorder) GetTodoByID(ctx, id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockTodoUseCase)(nil).GetTodoByID), ctx, id, email)
}

// GetTodosByUserID mocks base method.
func (m *MockTodoUseCase) GetTodosByUserID(ctx context.Context, email string) ([]usecase.TodoUsecaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosByUserID", ctx, email)
	ret0, _ := ret[0].([]usecase.TodoUsecaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosByUserID indicates an expected call of GetTodosByUserID.
func (mr *MockTodoUseCaseMockRecorder) GetTodosByUserID(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosByUserID", reflect.TypeOf((*MockTodoUseCase)(nil).GetTodosByUserID), ctx, email)
}

// UpdateTodo mocks base method.
func (m *MockTodoUseCase) UpdateTodo(ctx context.Context, todo usecase.TodoUsecaseInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoUseCaseMockRecorder) UpdateTodo(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoUseCase)(nil).UpdateTodo), ctx, todo)
}
